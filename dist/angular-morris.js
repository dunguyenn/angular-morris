(function() {
  angular.module('angular-morris', []);

}).call(this);

(function() {
  var morrisArea;

  morrisArea = (function() {
    function morrisArea() {}

    morrisArea.prototype.restrict = 'A';

    morrisArea.prototype.scope = {
      morrisAreaData: '=',
      morrisAreaXkey: '@',
      morrisAreaYkeys: '@',
      morrisAreaLabels: '@'
    };

    morrisArea.prototype.link = function(scope, element) {
      return scope.$watch('morrisAreaData', function() {
        if (scope.morrisAreaData) {
          if (!scope.morrisAreaInstance) {
            return scope.morrisAreaInstance = new Morris.Area({
              element: element,
              data: scope.morrisAreaData,
              xkey: scope.morrisAreaXkey,
              ykeys: JSON.parse(scope.morrisAreaYkeys),
              labels: JSON.parse(scope.morrisAreaLabels)
            });
          } else {
            return scope.morrisAreaInstance.setData(scope.morrisAreaData);
          }
        }
      });
    };

    return morrisArea;

  })();

  angular.module('angular-morris').directive('morrisArea', function() {
    return new morrisArea;
  });

}).call(this);

(function() {
  var morrisBar;

  morrisBar = (function() {
    function morrisBar() {}

    morrisBar.prototype.restrict = 'A';

    morrisBar.prototype.scope = {
      morrisBarData: '=',
      morrisBarX: '@',
      morrisBarY: '@',
      morrisBarLabels: '@'
    };

    morrisBar.prototype.link = function(scope, element) {
      return scope.$watch('morrisBarData', function() {
        if (scope.morrisBarData) {
          if (!scope.morrisBarInstance) {
            return scope.barInstance = new Morris.Bar({
              element: element,
              data: scope.morrisBarData,
              xkey: scope.morrisBarX,
              ykeys: JSON.parse(scope.morrisBarY),
              labels: JSON.parse(scope.morrisBarLabels),
              xLabelMargin: 2
            });
          } else {
            return scope.morrisBarInstance.setData(scope.morrisBarData);
          }
        }
      });
    };

    return morrisBar;

  })();

  angular.module('angular-morris').directive('morrisBar', function() {
    return new morrisBar;
  });

}).call(this);

(function() {
  var morrisDonut;

  morrisDonut = (function() {
    function morrisDonut() {}

    morrisDonut.prototype.restrict = 'A';

    morrisDonut.prototype.scope = {
      morrisDonutData: '='
    };

    morrisDonut.prototype.link = function(scope, element) {
      return scope.$watch('morrisDonutData', function() {
        if (scope.morrisDonutData) {
          if (!scope.morrisDonutInstance) {
            return scope.morrisDonutInstance = new Morris.Donut({
              element: element,
              data: scope.morrisDonutData
            });
          } else {
            return scope.morrisDonutInstance.setData(scope.morrisDonutData);
          }
        }
      });
    };

    return morrisDonut;

  })();

  angular.module('angular-morris').directive('morrisDonut', function() {
    return new morrisDonut;
  });

}).call(this);

(function() {
  var morrisLine;

  morrisLine = (function() {
    function morrisLine() {}

    morrisLine.prototype.restrict = 'A';

    morrisLine.prototype.scope = {
      morrisLineData: '=',
      morrisLineXkey: '@',
      morrisLineYkeys: '@',
      morrisLineLabels: '@',
      morrisLineColors: '@'
    };

    morrisLine.prototype.link = function(scope, element) {
      var colors;
      if (scope.morrisLineColors === void 0 || scope.morrisLineColors === '') {
        colors = null;
      } else {
        colors = JSON.parse(scope.morrisLineColors);
      }
      return scope.$watch('morrisLineData', function() {
        if (scope.morrisLineData) {
          if (!scope.morrisLineInstance) {
            return scope.morrisLineInstance = new Morris.Line({
              element: element,
              data: scope.morrisLineData,
              xkey: scope.morrisLineXkey,
              ykeys: JSON.parse(scope.morrisLineYkeys),
              labels: JSON.parse(scope.morrisLineLabels),
              lineColors: colors || ['#0b62a4', '#7a92a3', '#4da74d', '#afd8f8', '#edc240', '#cb4b4b', '#9440ed']
            });
          } else {
            return scope.morrisLineInstance.setData(scope.morrisLineData);
          }
        }
      });
    };

    return morrisLine;

  })();

  angular.module('angular-morris').directive('morrisLine', function() {
    return new morrisLine;
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,