(function() {
  angular.module('angular-morris', []);

}).call(this);

(function() {
  var MorrisArea;

  MorrisArea = (function() {
    function MorrisArea() {
      this.restrict = 'EA';
      this.scope = {
        data: '=morrisAreaData',
        options: '=morrisAreaOptions'
      };
    }

    MorrisArea.prototype.link = function(scope, element) {
      return scope.$watch('data', function() {
        var config;
        if (scope.data) {
          if (!scope.morrisAreaInstance) {
            config = angular.copy(scope.options);
            config.element = element;
            config.data = scope.data;
            return scope.morrisAreaInstance = new Morris.Area(config);
          } else {
            return scope.morrisAreaInstance.setData(scope.data);
          }
        }
      });
    };

    return MorrisArea;

  })();

  MorrisArea.$inject = ['$scope', '$element'];

  angular.module('angular-morris').directive('morrisArea', function() {
    return new MorrisArea;
  });

}).call(this);

(function() {
  var MorrisBar;

  MorrisBar = (function() {
    function MorrisBar() {
      this.restrict = 'EA';
      this.scope = {
        data: '=morrisBarData',
        options: '=morrisBarOptions'
      };
    }

    MorrisBar.prototype.link = function(scope, element) {
      return scope.$watch('data', function() {
        var config;
        if (scope.data) {
          if (!scope.morrisBarInstance) {
            config = angular.copy(scope.options);
            config.element = element;
            config.data = scope.data;
            return scope.morrisBarInstance = new Morris.Bar(config);
          } else {
            return scope.morrisBarInstance.setData(scope.data);
          }
        }
      });
    };

    return MorrisBar;

  })();

  MorrisBar.$inject = ['$scope', '$element'];

  angular.module('angular-morris').directive('morrisBar', function() {
    return new MorrisBar;
  });

}).call(this);

(function() {
  var MorrisDonut;

  MorrisDonut = (function() {
    function MorrisDonut() {
      this.restrict = 'EA';
      this.scope = {
        data: '=morrisDonutData',
        options: '=morrisDonutOptions'
      };
    }

    MorrisDonut.prototype.link = function(scope, element) {
      return scope.$watch('data', function() {
        var config;
        if (scope.data) {
          if (!scope.morrisDonutInstance) {
            config = angular.copy(scope.options);
            config.element = element;
            config.data = scope.data;
            return scope.morrisDonutInstance = new Morris.Donut(config);
          } else {
            return scope.morrisDonutInstance.setData(scope.data);
          }
        }
      });
    };

    return MorrisDonut;

  })();

  MorrisDonut.$inject = ['$scope', '$element'];

  angular.module('angular-morris').directive('morrisDonut', function() {
    return new MorrisDonut;
  });

}).call(this);

(function() {
  var MorrisLine;

  MorrisLine = (function() {
    function MorrisLine() {
      this.restrict = 'EA';
      this.scope = {
        data: '=morrisLineData',
        options: '=morrisLineOptions'
      };
    }

    MorrisLine.prototype.link = function(scope, element) {
      return scope.$watch('data', function() {
        var config;
        if (scope.data) {
          if (!scope.morrisLineInstance) {
            config = angular.copy(scope.options);
            config.element = element;
            config.data = scope.data;
            return scope.morrisLineInstance = new Morris.Line(config);
          } else {
            return scope.morrisLineInstance.setData(scope.data);
          }
        }
      });
    };

    return MorrisLine;

  })();

  MorrisLine.$inject = ['$scope', '$element'];

  angular.module('angular-morris').directive('morrisLine', function() {
    return new MorrisLine;
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,