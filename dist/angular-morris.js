(function() {
  angular.module('angular-morris', []);

}).call(this);

(function() {
  var morrisArea;

  morrisArea = (function() {
    function morrisArea() {}

    morrisArea.prototype.restrict = 'EA';

    morrisArea.prototype.scope = {
      data: '=morrisAreaData',
      xkey: '=morrisAreaXkey',
      ykeys: '=morrisAreaYkeys',
      labels: '=morrisAreaLabels',
      colors: '=morrisAreaColors'
    };

    morrisArea.prototype.link = function(scope, element) {
      var colors;
      if (scope.colors === void 0 || scope.colors === '') {
        colors = null;
      } else {
        colors = scope.colors;
      }
      return scope.$watch('morrisAreaData', function() {
        if (scope.data) {
          if (!scope.morrisAreaInstance) {
            return scope.morrisAreaInstance = new Morris.Area({
              element: element,
              data: scope.data,
              xkey: scope.xkey,
              ykeys: scope.ykeys,
              labels: scope.labels,
              lineColors: colors || ['#0b62a4', '#7a92a3', '#4da74d']
            });
          } else {
            return scope.morrisAreaInstance.setData(scope.data);
          }
        }
      });
    };

    return morrisArea;

  })();

  angular.module('angular-morris').directive('morrisArea', function() {
    return new morrisArea;
  });

}).call(this);

(function() {
  var morrisBar;

  morrisBar = (function() {
    function morrisBar() {}

    morrisBar.prototype.restrict = 'EA';

    morrisBar.prototype.scope = {
      data: '=morrisBarData',
      barx: '=morrisBarX',
      bary: '=morrisBarY',
      labels: '=morrisBarLabels',
      colors: '=morrisBarColors'
    };

    morrisBar.prototype.link = function(scope, element) {
      var colors;
      if (scope.colors === void 0 || scope.colors === '') {
        colors = null;
      } else {
        colors = scope.colors;
      }
      return scope.$watch('morrisBarData', function() {
        if (scope.data) {
          if (!scope.morrisBarInstance) {
            return scope.morrisBarInstance = new Morris.Bar({
              element: element,
              data: scope.data,
              xkey: scope.barx,
              ykeys: scope.bary,
              labels: scope.labels,
              barColors: colors || ['#0b62a4', '#7a92a3', '#4da74d'],
              xLabelMargin: 2
            });
          } else {
            return scope.morrisBarInstance.setData(scope.data);
          }
        }
      });
    };

    return morrisBar;

  })();

  angular.module('angular-morris').directive('morrisBar', function() {
    return new morrisBar;
  });

}).call(this);

(function() {
  var morrisDonut;

  morrisDonut = (function() {
    function morrisDonut() {}

    morrisDonut.prototype.restrict = 'A';

    morrisDonut.prototype.scope = {
      data: '=morrisDonutData',
      colors: '=morrisDonutColors'
    };

    morrisDonut.prototype.link = function(scope, element) {
      var colors;
      if (scope.colors === void 0 || scope.colors === '') {
        colors = null;
      } else {
        colors = scope.colors;
      }
      return scope.$watch('morrisDonutData', function() {
        if (scope.data) {
          if (!scope.morrisDonutInstance) {
            return scope.morrisDonutInstance = new Morris.Donut({
              element: element,
              data: scope.data,
              colors: colors || ['#0b62a4', '#7a92a3', '#4da74d', '#afd8f8', '#edc240', '#cb4b4b', '#9440ed']
            });
          } else {
            return scope.morrisDonutInstance.setData(scope.data);
          }
        }
      });
    };

    return morrisDonut;

  })();

  angular.module('angular-morris').directive('morrisDonut', function() {
    return new morrisDonut;
  });

}).call(this);

(function() {
  var morrisLine;

  morrisLine = (function() {
    function morrisLine() {}

    morrisLine.prototype.restrict = 'EA';

    morrisLine.prototype.scope = {
      data: '=morrisLineData',
      xkey: '=morrisLineXkey',
      ykeys: '=morrisLineYkeys',
      labels: '=morrisLineLabels',
      colors: '=morrisLineColors'
    };

    morrisLine.prototype.link = function(scope, element) {
      var colors;
      if (scope.colors === void 0 || scope.colors === '') {
        colors = null;
      } else {
        colors = scope.colors;
      }
      return scope.$watch('morrisLineData', function() {
        if (scope.data) {
          if (!scope.morrisLineInstance) {
            return scope.morrisLineInstance = new Morris.Line({
              element: element,
              data: scope.data,
              xkey: scope.xkey,
              ykeys: scope.ykeys,
              labels: scope.labels,
              lineColors: colors || ['#0b62a4', '#7a92a3', '#4da74d', '#afd8f8', '#edc240', '#cb4b4b', '#9440ed']
            });
          } else {
            return scope.morrisLineInstance.setData(scope.data);
          }
        }
      });
    };

    return morrisLine;

  })();

  angular.module('angular-morris').directive('morrisLine', function() {
    return new morrisLine;
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,